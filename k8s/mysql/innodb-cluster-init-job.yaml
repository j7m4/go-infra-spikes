apiVersion: batch/v1
kind: Job
metadata:
  name: mysql-innodb-cluster-init
  namespace: db
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: mysql-shell-init
        image: mysql/mysql-server:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-credentials
              key: root-password
        command:
        - bash
        - "-c"
        - |
          set -e
          
          # MySQL Shell is already included in mysql/mysql-server:8.0 image
          echo "Using MySQL Shell..."
          
          # Wait for all MySQL instances to be ready
          echo "Waiting for MySQL instances to be ready..."
          for i in 0 1 2; do
            while ! mysqlsh --sql -h mysql-$i.mysql-headless.db.svc.cluster.local -u root -p$MYSQL_ROOT_PASSWORD -e "SELECT 1" 2>/dev/null; do
              echo "Waiting for mysql-$i to be ready..."
              sleep 10
            done
            echo "mysql-$i is ready"
          done
          
          # Configure instances for InnoDB Cluster using MySQL Shell
          echo "Configuring MySQL instances for InnoDB Cluster..."
          for i in 0 1 2; do
            echo "Configuring mysql-$i..."
            mysqlsh --uri root@mysql-$i.mysql-headless.db.svc.cluster.local:3306 --password=$MYSQL_ROOT_PASSWORD --js <<EOF
          var rootPassword = '$MYSQL_ROOT_PASSWORD';
          try {
            // Configure instance for InnoDB Cluster
            print("Configuring instance for InnoDB Cluster...");
            dba.configureInstance('root@localhost:3306', {
              password: rootPassword,
              clusterAdmin: 'clusteradmin',
              clusterAdminPassword: 'ClusterAdmin123!',
              interactive: false,
              restart: true
            });
            print("Instance configured successfully");
          } catch(e) {
            print("Error configuring instance: " + e.message);
            // If already configured, continue
            if (e.message.indexOf("already valid") >= 0) {
              print("Instance already configured for InnoDB Cluster");
            } else {
              throw e;
            }
          }
          EOF
          done
          
          # Wait for instances to restart
          sleep 30
          
          # Create the cluster using MySQL Shell
          echo "Creating InnoDB Cluster..."
          mysqlsh --uri clusteradmin@mysql-0.mysql-headless.db.svc.cluster.local:3306 --password=ClusterAdmin123! --js <<'EOF'
          try {
            // Create cluster
            print("Creating InnoDB Cluster 'mycluster'...");
            var cluster = dba.createCluster('mycluster', {
              exitStateAction: 'OFFLINE_MODE',
              autoRejoinTries: 3,
              consistency: 'BEFORE_ON_PRIMARY_FAILOVER',
              expelTimeout: 5,
              memberWeight: 50
            });
            print("Cluster created successfully");
            
            // Add instances
            print("\nAdding mysql-1 to cluster...");
            cluster.addInstance('clusteradmin@mysql-1.mysql-headless.db.svc.cluster.local:3306', {
              password: 'ClusterAdmin123!',
              recoveryMethod: 'clone',
              waitRecovery: 2
            });
            print("mysql-1 added successfully");
            
            print("\nAdding mysql-2 to cluster...");
            cluster.addInstance('clusteradmin@mysql-2.mysql-headless.db.svc.cluster.local:3306', {
              password: 'ClusterAdmin123!',
              recoveryMethod: 'clone',
              waitRecovery: 2
            });
            print("mysql-2 added successfully");
            
            // Setup router account
            print("\nSetting up MySQL Router account...");
            cluster.setupRouterAccount('mysqlrouter', {password: 'RouterPass123!'});
            
            // Setup additional accounts
            print("\nCreating application user...");
            session.sql("CREATE USER IF NOT EXISTS 'app'@'%' IDENTIFIED BY 'app_password'").execute();
            session.sql("GRANT ALL PRIVILEGES ON *.* TO 'app'@'%'").execute();
            
            // Show final status
            print("\nFinal Cluster Status:");
            var status = cluster.status();
            print(JSON.stringify(status, null, 2));
            
          } catch(e) {
            print("Error: " + e.message);
            // Check if cluster already exists
            try {
              var cluster = dba.getCluster();
              print("Cluster already exists");
              print(JSON.stringify(cluster.status(), null, 2));
            } catch(e2) {
              print("Failed to get existing cluster: " + e2.message);
              throw e;
            }
          }
          EOF
          
          echo "InnoDB Cluster initialization complete!"
        volumeMounts:
        - name: cluster-config
          mountPath: /scripts
      volumes:
      - name: cluster-config
        configMap:
          name: mysql-innodb-cluster-config